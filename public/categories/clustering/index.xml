<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clustering on Peer Christensen</title>
    <link>/categories/clustering/</link>
    <description>Recent content in Clustering on Peer Christensen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sat, 15 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/clustering/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clustering Springsteen albums with spotifyr</title>
      <link>/post/clustering-springsteen-albums-with-spotifyr/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/clustering-springsteen-albums-with-spotifyr/</guid>
      <description>The spotifyr package is great and let’s you explore various aspects of music such as tempo, danceability and valence. In this post, we’ll explore Bruce Springsteen albums in terms of their similarities and dissimilarities.
# devtools::install_github(&amp;#39;charlie86/spotifyr&amp;#39;) library(spotifyr) library(tidyverse) library(magrittr) library(ggridges) library(ggcorrplot) library(viridisLite) library(factoextra) library(ggiraphExtra) Getting the data is easy with the get_artist_audio_features() function. Here, we’ll load it from a csv file and have a look.
# df &amp;lt;- get_artist_audio_features(artist = &amp;quot;bruce springsteen&amp;quot;) df &amp;lt;- read_csv(&amp;quot;https://raw.</description>
    </item>
    
  </channel>
</rss>